{"ast":null,"code":"var _jsxFileName = \"/home/kushank/Documents/notes-1/src/context.js\";\nimport React, { Component } from 'react';\nimport { detailNotes, storeNotes } from './data';\nconst NoteContext = React.createContext();\n\nclass NoteProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      notes: storeNotes,\n      detailNotes: detailNotes,\n      note: [],\n      editItem: false\n    };\n\n    this.changeHandler = event => {\n      const title = event.target.title;\n      const value = event.target.value;\n      const updatedControls = { ...this.state.formControls\n      };\n      const updatedFormElement = { ...updatedControls[title]\n      };\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedControls[title] = updatedFormElement;\n      this.setState({\n        formControls: updatedControls\n      });\n    };\n\n    this.formSubmitHandler = () => {\n      const formData = {};\n\n      for (let formElementId in this.state.formControls) {\n        formData[formElementId] = this.state.formControls[formElementId].value;\n      }\n\n      console.dir(formData);\n    };\n  }\n\n  render() {\n    return React.createElement(NoteContext.Provider, {\n      value: { ...this.state\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst NoteConsumer = NoteContext.Consumer;\nexport { NoteProvider, NoteConsumer };","map":{"version":3,"sources":["/home/kushank/Documents/notes-1/src/context.js"],"names":["React","Component","detailNotes","storeNotes","NoteContext","createContext","NoteProvider","state","notes","note","editItem","changeHandler","event","title","target","value","updatedControls","formControls","updatedFormElement","touched","setState","formSubmitHandler","formData","formElementId","console","dir","render","props","children","NoteConsumer","Consumer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAuBC,UAAvB,QAAyC,QAAzC;AAIA,MAAMC,WAAW,GAAGJ,KAAK,CAACK,aAAN,EAApB;;AAGA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACJC,MAAAA,KAAK,EAAGL,UADJ;AAEJD,MAAAA,WAAW,EAAGA,WAFV;AAGJO,MAAAA,IAAI,EAAG,EAHH;AAIJC,MAAAA,QAAQ,EAAG;AAJP,KADyB;;AAAA,SAWjCC,aAXiC,GAWjBC,KAAK,IAAI;AAErB,YAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACA,YAAME,KAAK,GAAGH,KAAK,CAACE,MAAN,CAAaC,KAA3B;AAEA,YAAMC,eAAe,GAAG,EACtB,GAAG,KAAKT,KAAL,CAAWU;AADQ,OAAxB;AAGA,YAAMC,kBAAkB,GAAG,EACzB,GAAGF,eAAe,CAACH,KAAD;AADO,OAA3B;AAGAK,MAAAA,kBAAkB,CAACH,KAAnB,GAA2BA,KAA3B;AACAG,MAAAA,kBAAkB,CAACC,OAAnB,GAA6B,IAA7B;AAEAH,MAAAA,eAAe,CAACH,KAAD,CAAf,GAAyBK,kBAAzB;AAEA,WAAKE,QAAL,CAAc;AACZH,QAAAA,YAAY,EAAED;AADF,OAAd;AAKH,KAhCgC;;AAAA,SAmCjCK,iBAnCiC,GAmCb,MAAM;AACxB,YAAMC,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIC,aAAT,IAA0B,KAAKhB,KAAL,CAAWU,YAArC,EAAmD;AAC/CK,QAAAA,QAAQ,CAACC,aAAD,CAAR,GAA0B,KAAKhB,KAAL,CAAWU,YAAX,CAAwBM,aAAxB,EAAuCR,KAAjE;AACH;;AAEGS,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACL,KA1CgC;AAAA;;AA6CjCI,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,EAC1B,GAAG,KAAKnB;AADkB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,KAAKoB,KAAL,CAAWC,QALhB,CADJ;AASH;;AAvDgC;;AA2DrC,MAAMC,YAAY,GAAGzB,WAAW,CAAC0B,QAAjC;AAEA,SAASxB,YAAT,EAAwBuB,YAAxB","sourcesContent":["import React, { Component } from 'react'\nimport { detailNotes , storeNotes } from './data'\n\n\n\nconst NoteContext = React.createContext();\n\n\nclass NoteProvider extends Component {\n    state = {\n        notes : storeNotes,\n        detailNotes : detailNotes,\n        note : [],\n        editItem : false\n\n    }\n\n  \n\n    changeHandler = event => {\n    \n        const title = event.target.title;\n        const value = event.target.value;\n  \n        const updatedControls = {\n          ...this.state.formControls\n        };\n        const updatedFormElement = {\n          ...updatedControls[title]\n        };\n        updatedFormElement.value = value;\n        updatedFormElement.touched = true;\n  \n        updatedControls[title] = updatedFormElement;\n  \n        this.setState({\n          formControls: updatedControls,\n         \n        });\n  \n    }\n    \n    \n    formSubmitHandler = () => {\n      const formData = {};\n      for (let formElementId in this.state.formControls) {\n          formData[formElementId] = this.state.formControls[formElementId].value;\n      }\n      \n          console.dir(formData);\n    }\n  \n\n    render() {\n        return (\n            <NoteContext.Provider value={{\n               ...this.state,\n             \n             \n            }}>\n                {this.props.children}\n            </NoteContext.Provider>\n        )\n    }\n}\n\n\nconst NoteConsumer = NoteContext.Consumer\n\nexport { NoteProvider , NoteConsumer };"]},"metadata":{},"sourceType":"module"}